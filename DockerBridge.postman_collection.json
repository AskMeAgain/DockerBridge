{
	"info": {
		"_postman_id": "aa248d85-ceed-40e5-ad00-8426e76cb2cf",
		"name": "DockerBridge",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Container",
			"item": [
				{
					"name": "Mysql",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var template = `",
									"<table bgcolor=\"#FFFFFF\">",
									"    <tr>",
									"    {{#each header}}",
									"        <th>{{this}}</th>",
									"    {{/each}}",
									"    </tr>",
									"    {{#each data}}",
									"    <tr>",
									"    {{#each this}}",
									"        <td>{{this}}</td>",
									"    {{/each}}",
									"    </tr>",
									"    {{/each}}",
									"</table>",
									"`;",
									"",
									"var responseByLine = pm.response.text().split(/\\r?\\n/);",
									"",
									"var arr = new Array();",
									"",
									"for(var i = 1; i < responseByLine.length -1; i++){",
									"    arr.push(responseByLine[i].split(\"\\t\"));",
									"}",
									"",
									"pm.visualizer.set(template, {",
									"    header: responseByLine[0].split(\"\\t\"),",
									"    data: arr",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    \"mysql -uroot -ppassword --silent\",\n    \"_______________\",\n    \"use db;\",\n    \"_______________\",\n    \"SELECT * FROM MyGuests;\",\n    \"__\",\n    \"exit\",\n    \"__\",\n    \"exit\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/container/:containerId/tty",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"container",
								":containerId",
								"tty"
							],
							"variable": [
								{
									"key": "containerId",
									"value": "f5133fb5199f"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Portainer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var template = `",
									"<link rel=\"stylesheet\" href=\"https://pro.fontawesome.com/releases/v5.10.0/css/all.css\" integrity=\"sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p\" crossorigin=\"anonymous\"/>",
									"<style>",
									"    i {color: black }",
									"    i:hover { color:grey; cursor: pointer; }",
									"    i:active { color:black }",
									"</style>",
									"<script>",
									"    function docker(containerId, command)",
									"    {   ",
									"        var theUrl = 'http://localhost:8080/container/' + containerId + '/command';",
									"        var xmlHttp = new XMLHttpRequest();",
									"        xmlHttp.open( \"POST\", theUrl, false );",
									"        xmlHttp.send(encodeURIComponent(command));",
									"        var element = document.getElementById(containerId)",
									"        element.textContent = xmlHttp.responseText;",
									"    }",
									"</script>",
									"<table bgcolor=\"#FFFFFF\">",
									"<tr>",
									"    <th>Commands</th>",
									"    <th>Image</th>",
									"    <th>Id</th>",
									"    <th>Status</th>",
									"</tr>",
									"    {{#each containers}}",
									"    <tr>",
									"        <td style=\"text-align:center\">",
									"            <a onclick=\"docker('{{this.Id}}', 'start')\"><i class=\"fas fa-play\"></i></a>",
									"            <a onclick=\"docker('{{this.Id}}', 'stop')\"><i class=\"fas fa-stop-circle\"></i></a>",
									"            <a onclick=\"docker('{{this.Id}}', 'remove')\"><i class=\"fas fa-trash\"></i></a>",
									"                <a onclick=\"docker('{{this.Id}}', 'restart')\"><i class=\"fas fa-sync-alt\"></i></a>",
									"        </td>",
									"        <td>{{this.Image}}</td>",
									"        <td>",
									"            <span style=\"display:inline-block;",
									"                white-space: nowrap;",
									"                overflow: hidden;",
									"                text-overflow: clip;",
									"                max-width: 8ch;\">",
									"                {{this.Id}}",
									"            </span>",
									"        </td>    ",
									"        <td>",
									"            <span id='{{this.Id}}'>{{this.State}}</span>",
									"        </td>",
									"    </tr>",
									"    {{/each}}",
									"</table>",
									"`;",
									"",
									"var header = pm.response.json()[0];",
									"var data = pm.response.json().slice(1);",
									"",
									"pm.visualizer.set(template, {",
									"    containers: pm.response.json()",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/container/list",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"container",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sftp",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"path\", pm.request.url.query.all()[0].value);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var body = responseBody;",
									"",
									"var arr = body.split(\"\\n\");",
									"",
									"var i = 0;",
									"for(; i < arr.length; i++){",
									"",
									"    if(arr[i].includes('ls -la')){",
									"        i++;",
									"        break;",
									"    }",
									"}",
									"",
									"var result = new Array();",
									"for(; i < arr.length; i++){",
									"    if(!arr[i].includes(\"sftp> exit\") && arr[i] !== \"\"){",
									"        var obj = new Object();",
									"        var splitted = arr[i].split(\"    \");",
									"        obj.permissions = splitted[0];",
									"",
									"        var subDirUser = splitted[1].split(\" \");",
									"        obj.user = subDirUser[1];",
									"        obj.group = splitted[2];",
									"        obj.date = splitted[3];",
									"",
									"        var sizeDateName = splitted[4].split(\" \");",
									"        obj.fileSize = sizeDateName[1];",
									"        obj.fileName = sizeDateName[5];",
									"        obj.date = sizeDateName[2] + \" \" + sizeDateName[3] + \" \"+ sizeDateName[4] ",
									"        result.push(obj);",
									"    }",
									"}",
									"",
									"var template = `",
									"<table bgcolor=\"#FFFFFF\">",
									"<tr>",
									"    <th>Permissions</th>",
									"    <th>FileName</th>",
									"    <th>User</th>",
									"    <th>Group</th>",
									"    <th>FileSize</th>",
									"    <th>Date</th>",
									"</tr>",
									"    {{#each files}}",
									"    <tr>",
									"        <td>",
									"           {{this.permissions}}",
									"        </td>",
									"        <td>",
									"           {{this.fileName}}",
									"        </td>",
									"        <td>",
									"           {{this.user}}",
									"        </td>",
									"          <td>",
									"           {{this.group}}",
									"        </td>",
									"        <td>",
									"           {{this.fileSize}}",
									"        </td>",
									"        <td>",
									"           {{this.date}}",
									"        </td>",
									"    </tr>",
									"    {{/each}}",
									"</table>",
									"`;",
									"",
									"pm.visualizer.set(template, {",
									"    files: result",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    \"sftp -P 22 foo@sftp\",\n    \"_________\",\n    \"pass\",\n    \"_________\",\n    \"ls -la {{path}}\",\n    \"__\",\n    \"exit\",\n    \"__\",\n    \"exit\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/container/:containerId/tty?path=upload/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"container",
								":containerId",
								"tty"
							],
							"query": [
								{
									"key": "path",
									"value": "upload/"
								}
							],
							"variable": [
								{
									"key": "containerId",
									"value": "{{containerId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Shell",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var template = `",
									"<style>",
									"    #content {",
									"        width: 100%;",
									"        display: flex;",
									"        flex-direction: column-reverse;",
									"        overflow-y: scroll;",
									"        padding-left: 10px; ",
									"    }",
									"    #inputfield {",
									"        width: 100%;",
									"        height: 40px;",
									"        margin-bottom: 0px;",
									"    }",
									"</style>",
									"",
									"<div style=\"display:flex;flex-direction:column; height:100%;\">",
									"    <div style=\"display:flex; flex-grow: 1; overflow: hidden; \">",
									"        <label id=\"content\"></label>",
									"    </div>",
									"    <div style=\"display:flex;\">",
									"        <input type=\"text\" id=\"inputfield\">",
									"    </div>",
									"</div>",
									"",
									"<script>",
									"const node = document.getElementById(\"inputfield\");",
									"node.addEventListener(\"keyup\", ({key}) => {",
									"    if (key === \"Enter\") {",
									"        var xhr = new XMLHttpRequest();",
									"        xhr.open('POST', 'http://localhost:8080/container/f5133fb5199f/tty',false);",
									"        xhr.setRequestHeader('Content-type', 'application/json');",
									"",
									"        var toBeSend = '[\"' + node.value.replaceAll('\"','\\\\\\\\\"') + '\"]';",
									"        console.error(toBeSend);",
									"        xhr.send(toBeSend);",
									"",
									"        var result = xhr.response.replaceAll(\"\\\\n\", \"<br />\");",
									"",
									"        if(!result.includes(\"<br />\")){",
									"            result += \"<br />\";",
									"        }",
									"",
									"        document.getElementById(\"content\").innerHTML += result;",
									"",
									"        node.value = '';",
									"    }",
									"})",
									"",
									"</script>",
									"`;",
									"",
									"",
									"pm.visualizer.set(template, {",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/container/list",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"container",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var template = `",
									"<style>",
									"    #content {",
									"        display: flex;",
									"        flex-direction: column-reverse;",
									"        overflow-y: scroll;",
									"        padding-left: 10px; ",
									"    }",
									"</style>",
									"",
									"<div style=\"display:flex;flex-direction:column; height:100%;\">",
									"    <label id=\"content\"></label>",
									"</div>",
									"",
									"<script>",
									"",
									"var xhr = new XMLHttpRequest();",
									"xhr.open('GET', '{{url}}', true);",
									"xhr.seenBytes = 0;",
									"",
									"xhr.onreadystatechange = function() {",
									"",
									"    var newData = xhr.response.substr(xhr.seenBytes);",
									"    var label = document.getElementById(\"content\");",
									"",
									"    label.innerHTML += newData.replaceAll(\"\\\\n\", \"<br />\");",
									"    xhr.seenBytes = xhr.responseText.length;",
									"};",
									"",
									"xhr.send();",
									"</script>",
									"`;",
									"",
									"console.log(pm.variables.replaceIn(pm.request.url.toString()))",
									"",
									"",
									"pm.visualizer.set(template, {",
									"    url: pm.request.url.toString()",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/container/{{containerId}}/log-stream",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"container",
								"{{containerId}}",
								"log-stream"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.variables.set(\"containerId\",\"cd17f6b5876d\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}